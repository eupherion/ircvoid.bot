// ipinfo.h
#ifndef IPINFO_H
#define IPINFO_H

#include <string>
#include <vector>

/**
 * @brief Получает информацию об IP-адресе через сервис ipinfo.io
 *
 * @param ipAddrStr Строка с IP-адресом. Если пустая — используется локальный хост.
 * @param ipinfo_token Токен для доступа к API ipinfo.io
 * @return std::string Информация о IP в виде строки
 */
std::string getIpInfo(std::string /* string with ip */ ipAddrStr, std::string ipinfo_token);

/**
 * @brief Получает список IP-адресов для указанного имени хоста
 *
 * @param hostname Имя хоста для поиска IP-адресов
 * @return std::vector<std::string> Вектор строк с IPv4/IPv6 адресами
 */
std::vector<std::string> getIpAddr(const std::string &hostname);

/**
 * @brief Компаратор для сортировки: IPv4 перед IPv6
 *
 * @param a Первый IP-адрес
 * @param b Второй IP-адрес
 * @return true Если a должен быть до b
 */
bool customIpSort(const std::string &a, const std::string &b);

/**
 * @brief Разбивает строку на слова, используя один или несколько пробельных символов как разделитель.
 *
 * Функция обрабатывает входную строку и возвращает вектор, содержащий отдельные слова.
 * Все последовательности пробельных символов (пробелы, табуляции, переводы строк)
 * рассматриваются как один разделитель. Пустые слова не добавляются в результат.
 *
 * @param input Входная строка, которую нужно разбить на слова.
 * @return std::vector<std::string> Вектор, содержащий извлечённые слова.
 *         Если входная строка пустая или содержит только пробелы — возвращается пустой вектор.
 *
 * @note Эта функция не модифицирует исходную строку.
 * @see std::istringstream
 */
std::vector<std::string> splitStringBySpaces(const std::string &input);

/**
 * @brief Упаковывает последовательность строк в «пакеты» ограниченной длины.
 *
 * Объединяет входные строки в группы (пакеты) так, чтобы длина каждого
 * результирующего пакета не превышала заданный лимит.  Между исходными
 * строками внутри пакета вставляется ровно один пробел.  Если очередная
 * строка не помещается в текущий пакет, текущий пакет сохраняется и
 * начинается новый.  Пустые строки из входного списка обрабатываются
 * как обычные (учитываются при расчёте длины).  Порядок строк
 * сохраняется.
 *
 * @param input        Вектор исходных строк, которые нужно упаковать.
 * @param max_length   Максимально допустимая длина одного пакета
 *                     (включая вставленные пробелы).
 * @return std::vector<std::string> Вектор сформированных пакетов.
 *
 * @note Примеры:
 *       @code
 *       auto packs = pack_strings({"one", "two", "three", "four"}, 10);
 *       // packs == {"one two", "three four"}
 *
 *       packs = pack_strings({"a", "bb", "ccc"}, 3);
 *       // packs == {"a", "bb", "ccc"}
 *       @endcode
 *
 * @warning Если длина отдельной исходной строки больше `max_length`,
 *          она всё равно будет помещена в отдельный пакет, превышая
 *          лимит.  Поведение в таких случаях считается корректным и
 *          позволяет избежать потери данных.
 */
std::vector<std::string> pack_strings(const std::vector<std::string> &input, size_t max_length);

/**
 * @brief Извлекает IRC-канал из строки.
 *
 * Анализирует переданную строку и, если она представляет собой корректный
 * идентификатор IRC-канала, возвращает его.  Идентификатор считается
 * корректным, если:
 *   - начинается символом `#`;
 *   - содержит только допустимые символы: латинские буквы (в любом регистре),
 *     цифры, а также символы `_`, `-`, `[`, `]`, `{`, `}`, `<`, `>`;
 *   - не содержит ведущих или завершающих пробельных символов.
 *
 * Внутри функции строка предварительно обрезается от пробелов с помощью
 * `boost::algorithm::trim_copy`.
 *
 * @param msgtext Входная строка, в которой ищется идентификатор канала.
 * @return std::string Идентификатор канала (включая ведущий `#`) при успехе;
 *                     пустая строка, если формат не соответствует правилам.
 *
 * @note Примеры:
 * @code
 * extractChan("  #general  ");     // вернёт "#general"
 * extractChan("#channel-42");      // вернёт "#channel-42"
 * extractChan("invalid");          // вернёт ""
 * extractChan("#spa ce");          // вернёт ""
 * extractChan(" #bad ");           // вернёт ""
 * @endcode
 */
std::string extractChan(const std::string &msgtext);
#endif // IPINFO_H